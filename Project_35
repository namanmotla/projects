import pyttsx3 #text to speech convert
import subprocess #to turn system on and off or in sleepmode
import pywhatkit #to open and search queries on application
import datetime #to tell date and time
import speech_recognition as sr #google speech api speech to text converter 
import wikipedia 
import webbrowser
import wolframalpha  #to find results from userquestions of mathematics
import os
import pyaudio
import random #to generate random values    
import winshell #to access specific folder and shell files to copy etc
import pyjokes #to make quick python jokes 
import shutil #to create file in read or write mode
import json #to get weather details in Well structured form
import feedparser
import smtplib #to send mails
import time
import requests #to get weather details
from twilio.rest import TwilioClient
from bs4 import BeautifulSoup
import win32com.client as wincl
from urllib.request import urlopen  #to fetch and open the locate usrls
from PyQt5 import QtWidgets, QtGui,QtCore
from PyQt5.QtGui import QMovie
import sys
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.uic import loadUiType
from email.mime import audio
from logging.config import listen

paths = {
    'notepad': "C:\\Program Files\\Notepad++\\notepad++.exe",
    'discord': "C:\\Users\\ashut\\AppData\\Local\\Discord\\app-1.0.9003\\Discord.exe",
    'calculator': "C:\\Windows\\System32\\calc.exe"
}
url = ('https://newsapi.org/v2/top-headlines?'
       'country = in&'
       'apiKey =')
  
url +='f506c90992f2462f97464c2f21711224'

TMDB_API_KEY = "2a18a5c26f2af1ea54f0b3c486cfd5f8"
NEWS_API_KEY=" f506c90992f2462f97464c2f21711224"

flags = QtCore.Qt.WindowFlags(QtCore.Qt.FramelessWindowHint)

engine = pyttsx3.init('sapi5')
voices = engine.getProperty('voices')
engine.setProperty('voice',voices[0].id)
engine.setProperty('rate',180)

def speak(audio):
    engine.say(audio)
    engine.runAndWait()

def wish():
    hour = int(datetime.datetime.now().hour)
    if (hour>=0 and hour<12):
        speak('Good Morning Sir !')
    
    elif(hour>=12 and hour<18):
        speak('Goodafter !')
        
    elif(hour>=18):
        speak('Goodevening !')
         
    speak(" I am Patrick , Your new ai based Desktop assistant.  How can i help you today ? ")
          
        
def send_whatsapp_message(number, message):
    pywhatkit.sendwhatmsg_instantly(f"+91{number}", message)

def get_random_advice():
    res = requests.get("https://api.adviceslip.com/advice").json()
    return res['slip']['advice']

def sendEmail(to, content):
    print("Sending mail to ", to)
    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.ehlo()
    server.starttls()
    #paste your email id and password in the respective places
    server.login('namanmotla@gmail.com', 'password') 
    server.sendmail('your email id', to, content)
    server.close()
 
def timer():
    speak('of how much time')
    text = str(input())
    print("In how many minutes?")
    local_time = float(input())
    local_time = local_time * 60
    time.sleep(local_time)
    print(text)
def get_trending_movies():
    trending_movies = []
    res = requests.get(
        f"https://api.themoviedb.org/3/trending/movie/day?api_key={TMDB_API_KEY}").json()
    results = res["results"]
    for r in results:
        trending_movies.append(r["original_title"])
    print(trending_movies[:5])
    speak(trending_movies[:5])
    
def getWeather(city_name):
    #cityName=place.get() #getting input of name of the place from user
    baseUrl = "http://api.openweathermap.org/data/2.5/weather?" #base url from where we extract weather report
    url = baseUrl + "appid=" + 'd850f7f52bf19300a9eb4b0aa6b80f0d' + "&q=" + city_name  
    response = requests.get(url)
    x = response.json()

    #If there is no error, getting all the weather conditions
    if x["cod"] != "404":
        y = x["main"]
        temp = y["temp"]
        temp-=273 
        pressure = y["pressure"]
        humidity = y["humidity"]
        z = x["weather"]
        description = z[0]["description"]
        info=(" Temperature= " +str(temp)+"Â°C"+"\n atmospheric pressure (hPa) ="+str(pressure) +"\n humidity = " +str(humidity)+"%" +"\n description = " +str(description))
        print(info)
        speak("Here is the weather report at")
        speak(city_name)
        speak(info)
    else:
        speak(" City Not Found ")
def open_notepad():
    os.startfile(paths['notepad'])
def open_discord():
    os.startfile(paths['discord'])
def open_cmd():
    os.system('start cmd')
def open_camera():
    subprocess.run('start microsoft.windows.camera:', shell=True)
def open_calculator():
    subprocess.Popen(paths['calculator'])

def getNews():
    try:
        response = requests.get(url)
    except:
        engine.say("can, t access link, plz check you internet ")
  
    news = json.loads(response.text)
    
    for new in news['articles']:
        print("##############################################################\n")
        print(str(new['title']), "\n\n")
        engine.say(str(new['title']))
        print('______________________________________________________\n')
  
        engine.runAndWait()
  
        print(str(new['description']), "\n\n")
        engine.say(str(new['description']))
        engine.runAndWait()
        print("..............................................................")
        time.sleep(2)

#def getName():
  #  global username
   # speak("Can I please know your name?")
   ##  print("Name:",username)
   # speak("I am glad to know you!")
   # columns = shutil.get_terminal_size().columns
   # speak("How can i Help you, ")
  #  speak(username)

paths = {
    'calculator': "C:\\Windows\\System32\\calc.exe"
}


def open_cmd():
    os.system('start cmd')
def open_camera():
    subprocess.run('start microsoft.windows.camera:', shell=True)
def open_calculator():
    subprocess.Popen(paths['calculator'])



class mainT(QThread):
    def __init__(self):
        super(mainT,self).__init__()
    
    def run(self):
        self.Patrick()
    
    def STT(self):
        R = sr.Recognizer()
        with sr.Microphone() as source:
            print("Listning...........")
            R.pause_threshold = 1
            R.energy_threshold=600
            audio = R.listen(source)
        try:
            print("Recogn......")
            text = R.recognize_google(audio,language='en-in')
            print(">> ",text)
        except Exception:
            speak("Sorry Speak Again")
            return "None"
        text = text.lower()
        return text

    def Patrick(self):
        wish()
        while True:
            self.query = self.STT().lower()
            mymusic = self.query
            if 'wikipedia' in self.query:
                speak('Serarching Wikipedia.......')
                self.query  = self.query.replace('wikipedia', "")
                result = wikipedia.summary(self.query, sentences=2)
                speak('According to Wikipedia ')
                print(result)
                speak(result)
            
            elif 'open youtube' in self.query:
                webbrowser.open("youtube.com")
                
            elif 'open google' in self.query:
                webbrowser.open("google.com")
            
            elif 'play music' in self.query :
                music_dir = 'C:\\Users\\naman\\Desktop\\music'
                songs = os.listdir(music_dir)
                print(songs)
                random.shuffle(songs)    
                os.startfile(os.path.join(music_dir, songs[0]))
                
                    
            elif 'how are you' in self.query or 'how have you been' in self.query :
                    speak("I am doing Excellent . Just got a new home in your PC.")
                
            elif 'what are you doing' in self.query:
                    speak("I am here speaking to you. That's what I am doing")
        
            elif 'what am i doing' in self.query:
                    speak("You tell me. My guess is you are speaking to me")
            
            elif 'how is life' in self.query or 'how is your life' in self.query:
                    speak("Life in the silicon world is amazing")
            
            elif 'where do you live' in self.query or 'where do you stay' in self.query or 'where is your home' in self.query \
                        or 'what is your address' in self.query:
                    speak('I live in the silicon world. Be born next time as a software. Then you can come live with me too')
            
            elif 'whom am I speaking to' in self.query:
                    speak("You are speaking to Patrick ")
            
            elif 'who created you' in self.query or 'who made you' in self.query or 'who is your creator' in self.query or \
                        "who's creation are you" in self.query or 'who has made you' in self.query or \
                        'who has created you' in self.query:
                    speak('I was created by  with the helpful suggestions from Himanshu and Zubair  which helped in how I turned out to be.')
            
            elif 'your birthday' in self.query or 'when were you created' in self.query or 'when were you born' in self.query:
                    speak('I am a work in progress always.')
            
            elif 'what is your name' in self.query or 'what should I call you' in self.query or \
                        "what's your name" in self.query:
                    speak("I am Patrick")
            
            elif 'to whom do you belong' in self.query or 'who is your owner' in self.query:
                    speak("I am owned and copyrighted by ")
            elif "will you be my gf" in self.query or "will you be my bf" in self.query:
                speak("I'm not sure about that, may be you should give me some time")
            elif "i love you" in self.query:
                speak("Thank you! But, It's a pleasure to hear it from you.")
            elif 'joke' in self.query:
                speak(pyjokes.get_joke())
            elif 'timer' in self.query:
                timer()
            
                
            elif 'mail' in self.query:
                try:
                    speak("Whom should I send the mail")
                    to = self.STT()
                    speak("What is the body?")
                    content = self.STT()
                    sendEmail(to, content)
                    speak("Email has been sent successfully !")
                except Exception as e:
                        print(e)
                        speak("I am sorry, not able to send this email")

            elif 'exit' in self.query or 'Thankyou' in self.query:
                speak("Thanks for giving me your time")
                exit()

            elif "weather" in self.query:
                speak(" Please tell your city name ")
                print("City name : ")
                cityName = self.STT()
                getWeather(cityName)

            elif "what is" in self.query or "Value of " in self.query:
                
                client = wolframalpha.Client("GX97UX-HE6T3YRJK6")
                res = client.query(self.query)

                try:
                    print (next(res.results).text)
                    speak (next(res.results).text)
                except StopIteration:
                    print ("No results")
            elif "Trending movies" in self.query or "show movies " in self.query:
                speak("Some of the trending movies are ")
                get_trending_movies()

            elif 'search' in self.query:
                self.query = self.query.replace("search", "")
                webbrowser.open(self.query)

            elif 'news' in self.query:
                speak(f"I'm reading out the latest news headlines, sir")
                speak(getNews())
                speak("For your convenience, I am printing it on the screen sir.")
                print(*getNews(), sep='\n')
            
            elif "don't listen" in self.query or "stop listening" in self.query:
                speak("for how much time you want to stop me from listening self.querys")
                a = int(self.STT())
                time.sleep(a)
                print(a)
                
            elif 'shutdown system' in self.query:
                    speak("Hold On a Sec ! Your system is on its way to shut down")
                    subprocess.call('shutdown / p /f')

            elif "restart" in self.query:
                subprocess.call(["shutdown", "/r"])

            elif "sleep" in self.query:
                speak("Setting in sleep mode")
                subprocess.call("shutdown / h")
                
            elif "open notepad" in self.query:
                speak("Opening notepad sir")
                open_notepad()
                
            elif "open discord" in self.query:
                speak("Opening discord sir")
                open_discord()
                
                
            elif "open cmd" in self.query or "open command prompt" in self.query:
                speak("Opening command prompt sir")
                open_cmd()
                
            elif "camera" in self.query:
                speak("Opening camera sir")
                open_camera()
                
            elif "calculator" in self.query:
                speak("Opening calculator sir")
                open_calculator()
            
            elif "advice" in self.query:
                speak(f"Here's an advice for you, sir")
                advice = get_random_advice()
                speak(advice)
                speak("For your convenience, I am printing it on the screen sir.")
                print(advice)

            elif "write a note" in self.query:
                speak("What should i write, sir")
                note = self.STT()
                file = open('Patrick.txt', 'w')
                speak("Sir, Should i include date and time")
                snfm = self.STT()
                if 'yes' in snfm or 'sure' in snfm:
                    strTime = datetime.datetime.now().strftime("% H:% M:% S")
                    file.write(strTime)
                    file.write(" :- ")
                    file.write(note)
                else:
                    file.write(note)
                    
            elif 'play ' in self.query:
                song = self.query.replace('play', '')
                speak('playing ' + song)
                pywhatkit.playonyt(song)
                exit()
                
            elif 'time' in self.query:
                time = datetime.datetime.now().strftime('%I:%M %p')
                print(time)
                speak('Current time is ' + time)
                
            elif 'date' in self.query:
                date = datetime.datetime.now().strftime('%d /%m /%y')
                print(date)
                speak('Todays date is ' + date)
                    
            elif 'send message ' in self.query or 'whatsapp' in self.query or 'send text' in self.query:
                speak('whom u want to send message')
                number = self.STT()
                speak('what message u want to send ')
                
                message= self.STT()
                send_whatsapp_message(number, message)
                speak('sending message')
                print("Successfully Sent!")
                
            
        



FROM_MAIN,_ = loadUiType(os.path.join(os.path.dirname(__file__),"./scifi.ui"))

class Main(QMainWindow,FROM_MAIN):
    def __init__(self,parent=None):
        super(Main,self).__init__(parent)
        self.setupUi(self)
        self.setFixedSize(1920,1080)
        self.label_7 = QLabel
        self.exitB.setStyleSheet("background-image:url(./lib/exit - Copy.png);\n"
        "border:none;")
        self.exitB.clicked.connect(self.close)
        self.setWindowFlags(flags)
        Dspeak = mainT()
        self.label_7 = QMovie("./lib/gifloader.gif", QByteArray(), self)
        self.label_7.setCacheMode(QMovie.CacheAll)
        self.label_4.setMovie(self.label_7)
        self.label_7.start()

        self.ts = time.strftime("%A, %d %B")

        Dspeak.start()
        self.label.setPixmap(QPixmap("./lib/tuse.png"))
        self.label_5.setText("<font size=8 color='white'>"+self.ts+"</font>")
        self.label_5.setFont(QFont(QFont('Acens',8)))


app = QtWidgets.QApplication(sys.argv)
main = Main()
main.show()
exit(app.exec_())
